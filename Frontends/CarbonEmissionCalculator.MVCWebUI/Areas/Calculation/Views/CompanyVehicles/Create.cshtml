@using CarbonEmissionCalculator.Domain.Entities
@model CarbonEmissionCalculator.MVCWebUI.Models.CompanyVehiclesCreateViewModel
@{
    ViewData["Title"] = "Şirket Araçları - Binek ve Yük Araçları";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var aracTurleri = new[] { "Küçük Araç", "Orta Araç", "Büyük Araç", "Ortalama Araç", "Kamyonet", "Ağır Yük Taşıtı"};
    var yakitTurleri = new[] { "Dizel", "Benzin", "LPG", "Bilinmeyen", "100% Yüklü", "Ortalama Yüklü" };
}
<div class="card">
    <div class="card-header bg-white d-flex justify-content-between align-items-center sticky-header">
        <h5 class="mb-0">Şirket Araçları - Binek ve Yük Araçları</h5>
        <a href="/" class="btn btn-sm btn-secondary">
            <i class="fas fa-arrow-left me-1"></i>Geri
        </a>
    </div>
    <div class="card-body">
        <form id="companyVehiclesForm" method="post">
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <label class="form-label">Firma İsmi</label>
                        <div class="input-group">
                        <input type="text" class="form-control" id="firmName" name="FirmName" required />
                    </div>
                </div>
            </div>
            <div class="table-responsive text-nowrap">
                <table class="table table-bordered" id="vehiclesTable">
                    <thead class="sticky-header">
                        <tr class="text-center bg-light">
                            <th>Araç Türü</th>
                            <th>Yakıt Türü</th>
                            <th>Toplam Mesafe (km)</th>
                            <th>kg CO₂/km</th>
                            <th>kg CH₄/km</th>
                            <th>kg N₂O/km</th>
                            <th>kg CO₂</th>
                            <th>kg CH₄</th>
                            <th>kg N₂O</th>
                            <th>kg CO₂e</th>
                            <th>ton CO₂e</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="9" class="text-end"><strong>TOPLAM</strong></td>
                            <td><input type="number" class="form-control" id="total-co2e" readonly /></td>
                            <td><input type="number" class="form-control" id="total-co2e-ton" readonly /></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div class="row mt-2">
                <div class="col">
                    <button type="button" id="addRowBtn" class="btn btn-outline-primary">Satır Ekle</button>
                </div>
        </div>
            <div class="row mt-3">
            <div class="col">
                    <button type="submit" class="btn btn-primary">Hesapla</button>
                    <button type="reset" class="btn btn-secondary">Temizle</button>
                <button type="submit" id="postToDb" class="btn btn-success" style="float:right;">Onayla Ve Kaydet</button>
            </div>
        </div>
        </form>
    </div>
</div>
@section Scripts {
    <script>
        const aracTurleri = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(aracTurleri));
        const yakitTurleri = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(yakitTurleri));
        let rowIndex = 0;
        function createRow(idx) {
            return `<tr>
                <td><select class="form-select" name="Rows[${idx}].VehicleType" style="min-width: 140px;">${aracTurleri.map(tur => `<option value="${tur}">${tur}</option>`).join('')}</select></td>
                <td><select class="form-select" name="Rows[${idx}].FuelType" style="min-width: 120px;">${yakitTurleri.map(tur => `<option value="${tur}">${tur}</option>`).join('')}</select></td>
                <td><input type="number" class="form-control distance" name="Rows[${idx}].Distance" style="min-width: 100px;" /></td>
                <td><input type="number" class="form-control ef-co2" name="Rows[${idx}].EmissionFactorCO2" style="min-width: 100px;" /></td>
                <td><input type="number" class="form-control ef-ch4" name="Rows[${idx}].EmissionFactorCH4" style="min-width: 100px;" /></td>
                <td><input type="number" class="form-control ef-n2o" name="Rows[${idx}].EmissionFactorN2O" style="min-width: 100px;" /></td>
                <td><input type="number" class="form-control emission-co2" name="Rows[${idx}].EmissionCO2" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control emission-ch4" name="Rows[${idx}].EmissionCH4" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control emission-n2o" name="Rows[${idx}].EmissionN2O" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control total-co2e" name="Rows[${idx}].TotalCO2e" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control total-co2e-ton" name="Rows[${idx}].TotalCO2eTon" readonly style="min-width: 140px;" /></td>
                <td><button type="button" class="btn btn-danger btn-sm remove-row">Sil</button></td>
            </tr>`;
        }
        function calculateRow(row) {
            const distance = parseFloat(row.find('.distance').val().replace(',', '.')) || 0;
            const efCO2 = parseFloat(row.find('.ef-co2').val().replace(',', '.')) || 0;
            const efCH4 = parseFloat(row.find('.ef-ch4').val().replace(',', '.')) || 0;
            const efN2O = parseFloat(row.find('.ef-n2o').val().replace(',', '.')) || 0;
                const emissionCO2 = distance * efCO2;
                const emissionCH4 = distance * efCH4;
                const emissionN2O = distance * efN2O;
            row.find('.emission-co2').val(emissionCO2.toFixed(6));
            row.find('.emission-ch4').val(emissionCH4.toFixed(6));
            row.find('.emission-n2o').val(emissionN2O.toFixed(6));
            const totalCO2e = emissionCO2 + emissionCH4 + emissionN2O;
            row.find('.total-co2e').val(totalCO2e.toFixed(6));
            row.find('.total-co2e-ton').val((totalCO2e * 0.001).toFixed(6));
            calculateTotals();
        }
        function calculateTotals() {
            let totalCO2e = 0;
            let totalCO2eTon = 0;
            $('.total-co2e').each(function() {
                totalCO2e += parseFloat($(this).val().replace(',', '.')) || 0;
            });
            $('.total-co2e-ton').each(function() {
                totalCO2eTon += parseFloat($(this).val().replace(',', '.')) || 0;
            });
            $('#total-co2e').val(totalCO2e.toFixed(6));
            $('#total-co2e-ton').val(totalCO2eTon.toFixed(6));
        }
        $(document).ready(function() {
            $('#addRowBtn').on('click', function() {
                $('#vehiclesTable tbody').append(createRow(rowIndex++));
            });
            $('#vehiclesTable').on('click', '.remove-row', function() {
                $(this).closest('tr').remove();
                calculateTotals();
                // indexleri güncelle
                $('#vehiclesTable tbody tr').each(function(i, tr) {
                    $(tr).find('select').eq(0).attr('name', `Rows[${i}].VehicleType`);
                    $(tr).find('select').eq(1).attr('name', `Rows[${i}].FuelType`);
                    $(tr).find('input.distance').attr('name', `Rows[${i}].Distance`);
                    $(tr).find('input.ef-co2').attr('name', `Rows[${i}].EmissionFactorCO2`);
                    $(tr).find('input.ef-ch4').attr('name', `Rows[${i}].EmissionFactorCH4`);
                    $(tr).find('input.ef-n2o').attr('name', `Rows[${i}].EmissionFactorN2O`);
                    $(tr).find('input.emission-co2').attr('name', `Rows[${i}].EmissionCO2`);
                    $(tr).find('input.emission-ch4').attr('name', `Rows[${i}].EmissionCH4`);
                    $(tr).find('input.emission-n2o').attr('name', `Rows[${i}].EmissionN2O`);
                    $(tr).find('input.total-co2e').attr('name', `Rows[${i}].TotalCO2e`);
                    $(tr).find('input.total-co2e-ton').attr('name', `Rows[${i}].TotalCO2eTon`);
                });
            });
            $('#vehiclesTable').on('input', '.distance, .ef-co2, .ef-ch4, .ef-n2o', function() {
                calculateRow($(this).closest('tr'));
            });
            $('#companyVehiclesForm').on('submit', function(e) {
                // Hesaplama işlemleri veya veri gönderimi burada yapılabilir
                // e.preventDefault(); // Eğer AJAX ile gönderilecekse
            });
        });
    </script>
}