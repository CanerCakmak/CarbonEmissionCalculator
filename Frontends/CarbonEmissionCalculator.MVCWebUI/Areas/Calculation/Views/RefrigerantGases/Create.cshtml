@using CarbonEmissionCalculator.Domain.Entities
@model CarbonEmissionCalculator.MVCWebUI.Models.RefrigerantGasesCreateViewModel

@{
    ViewData["Title"] = "Soğutucu Gazlar";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var ekipmanTurleri = new[] {
        "Yangın Söndürücü",
        "Yangın Söndürme Sistemi",
        "Klima",
        "Taşınabilir Klima",
        "Araç Kliması",
        "Su Sebili",
        "Buzdolabı",
        "Ticari Soğutucu",
        "Soğuk Depo",
        "Chiller",
        "Gizli Trafik Devre Kesici"
    };
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mt-4">Soğutucu Gazlar Emisyon Hesaplama</h2>
        <a href="/" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-1"></i>Geri
        </a>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <form id="refrigerantGasesForm" method="post">
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <label class="form-label">Firma İsmi</label>
                        <div class="input-group">
                            <select class="form-select" asp-for="CompanyId" name="CompanyId" id="CompanyId" required>
                                <option value="">Lütfen Firma Seçiniz</option>
                                @if (ViewBag.CompanyList != null)
                                {
                                    foreach (var company in ViewBag.CompanyList)
                                    {
                                        <option value="@company.Value">@company.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered" id="refrigerantTable">
                        <thead>
                            <tr>
                                <th>Ekipman Türü</th>
                                <th>Gaz Cinsi</th>
                                <th>Adet</th>
                                <th>Miktar (kg)</th>
                                <th>Toplam Miktar (kg)</th>
                                <th>Kaçak Yüzdesi</th>
                                <th>Kaçak Miktarı veya Bilinen Dolum Miktarı</th>
                                <th>Emisyon Faktörü (kgCO₂e/kg)</th>
                                <th>kg CO₂e</th>
                                <th>Ton CO₂e</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @* Yeni kayıt oluşturulduğu için başlangıçta burası boş kalacak *@
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="8" class="text-end"><strong>TOPLAM</strong></td>
                                <td><input type="number" class="form-control" id="total-kg-co2e" readonly /></td>
                                <td><input type="number" class="form-control" id="total-ton-co2e" readonly /></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div class="row mt-2">
                    <div class="col">
                        <button type="button" id="addRowBtn" class="btn btn-outline-primary">Satır Ekle</button>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <button type="submit" class="btn btn-primary">Hesapla</button>
                        <button type="reset" class="btn btn-secondary">Temizle</button>
                        <button type="submit" id="postToDb" class="btn btn-success" style="float:right;">Onayla Ve Kaydet</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const ekipmanTurleri = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ekipmanTurleri));
        let rowIndex = 0; // Yeni kayıt olduğu için başlangıç 0

        function createRow(idx) {
            return `<tr>
                <td>
                    <select class="form-select equipment-type" name="Rows[${idx}].EquipmentType" style="min-width: 225px;">
                        ${ekipmanTurleri.map(tur => `<option value="${tur}">${tur}</option>`).join('')}
                    </select>
                </td>
                <td><input type="text" class="form-control gas-type" name="Rows[${idx}].GasType" style="min-width: 90px;" /></td>
                <td><input type="number" class="form-control quantity" name="Rows[${idx}].Quantity" style="min-width: 90px;" /></td>
                <td><input type="number" class="form-control amount" name="Rows[${idx}].Amount" style="min-width: 90px;" /></td>
                <td><input type="number" class="form-control total-amount" name="Rows[${idx}].TotalAmount" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control leak-percentage" name="Rows[${idx}].LeakPercentage" style="min-width: 90px;" /></td>
                <td><input type="number" class="form-control leak-amount" name="Rows[${idx}].LeakAmount" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control emission-factor" name="Rows[${idx}].EmissionFactor" style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control kg-co2e" name="Rows[${idx}].KgCO2e" readonly style="min-width: 140px;" /></td>
                <td><input type="number" class="form-control ton-co2e" name="Rows[${idx}].TonCO2e" readonly style="min-width: 140px;" /></td>
                <td><button type="button" class="btn btn-danger btn-sm remove-row">Sil</button></td>
            </tr>`;
        }

        function calculateRow(row) {
            const quantity = parseFloat(row.find('.quantity').val().replace(',', '.')) || 0;
            const amount = parseFloat(row.find('.amount').val().replace(',', '.')) || 0;
            const leakPercentage = parseFloat(row.find('.leak-percentage').val().replace(',', '.')) || 0;
            const emissionFactor = parseFloat(row.find('.emission-factor').val().replace(',', '.')) || 0;

            const totalAmount = quantity * amount;
            row.find('.total-amount').val(totalAmount.toFixed(2));

            const leakAmount = totalAmount * (leakPercentage / 100);
            row.find('.leak-amount').val(leakAmount.toFixed(2));

            const kgCO2e = leakAmount * emissionFactor;
            row.find('.kg-co2e').val(kgCO2e.toFixed(2));

            const tonCO2e = kgCO2e * 0.001;
            row.find('.ton-co2e').val(tonCO2e.toFixed(3));

            calculateTotals();
        }

        function calculateTotals() {
            let totalKgCO2e = 0;
            let totalTonCO2e = 0;
            $('.kg-co2e').each(function() {
                totalKgCO2e += parseFloat($(this).val().replace(',', '.')) || 0;
            });
            $('.ton-co2e').each(function() {
                totalTonCO2e += parseFloat($(this).val().replace(',', '.')) || 0;
            });
            $('#total-kg-co2e').val(totalKgCO2e.toFixed(2));
            $('#total-ton-co2e').val(totalTonCO2e.toFixed(3));
        }

        // BU FONKSİYON, TÜM INPUT VE SELECT'LERİN NAME ÖZNİTELİKLERİNİ DÜZGÜNCE GÜNCELLER
        function updateRowIndexes() {
            $('#refrigerantTable tbody tr').each(function(i, tr) {
                // Her bir elemanın name özniteliğini template literal kullanarak güncelliyoruz
                $(tr).find('select.equipment-type').attr('name', `Rows[${i}].EquipmentType`);
                $(tr).find('input.gas-type').attr('name', `Rows[${i}].GasType`);
                $(tr).find('input.quantity').attr('name', `Rows[${i}].Quantity`);
                $(tr).find('input.amount').attr('name', `Rows[${i}].Amount`);
                $(tr).find('input.total-amount').attr('name', `Rows[${i}].TotalAmount`);
                $(tr).find('input.leak-percentage').attr('name', `Rows[${i}].LeakPercentage`);
                $(tr).find('input.leak-amount').attr('name', `Rows[${i}].LeakAmount`);
                $(tr).find('input.emission-factor').attr('name', `Rows[${i}].EmissionFactor`);
                $(tr).find('input.kg-co2e').attr('name', `Rows[${i}].KgCO2e`);
                $(tr).find('input.ton-co2e').attr('name', `Rows[${i}].TonCO2e`);
            });
            rowIndex = $('#refrigerantTable tbody tr').length; // Satır silindikten sonra rowIndex'i güncel tut
        }

        $(document).ready(function() {
            // "Satır Ekle" butonu
            $('#addRowBtn').on('click', function() {
                console.log("Butona Basıldı");
                $('#refrigerantTable tbody').append(createRow(rowIndex)); // Mevcut rowIndex ile satırı ekle
                rowIndex++; // Ardından rowIndex'i bir sonraki satır için artır
            });

            // Dinamik satır silme
            $('#refrigerantTable').on('click', '.remove-row', function() {
                $(this).closest('tr').remove(); // Satırı sil
                updateRowIndexes(); // İndeksleri güncelle
                calculateTotals(); // Toplamları yeniden hesapla
            });

            // Dinamik hesaplama (input değişikliklerinde)
            $('#refrigerantTable').on('input', '.quantity, .amount, .leak-percentage, .emission-factor', function() {
                calculateRow($(this).closest('tr'));
            });

            // Form submit işlemi (eğer AJAX ile gönderilecekse e.preventDefault() kullanılabilir)
            $('#refrigerantGasesForm').on('submit', function(e) {
                // Örneğin, burada bir AJAX isteği gönderebilirsiniz:
                // e.preventDefault();
                // var formData = $(this).serialize();
                // $.post($(this).attr('action'), formData, function(response) {
                //     console.log('Başarılı:', response);
                // }).fail(function(xhr, status, error) {
                //     console.error('Hata:', error);
                // });
            });
        });
    </script>
}